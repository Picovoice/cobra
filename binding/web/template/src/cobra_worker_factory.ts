/*
  Copyright 2018-2021 Picovoice Inc.
  You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
  file accompanying this source.
  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  specific language governing permissions and limitations under the License.
*/

import CobraWorker from 'web-worker:./cobra_worker.ts';
import { CobraWorkerRequestInit, CobraWorkerResponse } from './cobra_types';

export default class CobraWorkerFactory {
  private constructor() { }

  /**
   * Create Cobra web worker instances. The promise resolves when the worker is ready to process
   * voice data (perhaps from WebVoiceProcessor).
   *
   * @param accessKey - AccessKey
   * generated by Picovoice Console
   *
   */
  public static async create(
    accessKey: string,
    callback: CallableFunction,
    start?: boolean
  ): Promise<Worker> {
    // n.b. The *worker* creation is itself synchronous. But, inside the worker is an async
    // method of CobraFactory which is initializing. This means the worker is not actually ready
    // for voice processing immediately after intantiation. When its initialization completes,
    // we receive a special CobraWorkerMessageOut message and resolve the worker promise.

    const cobraWorker = new CobraWorker();
    const cobraInitCmd: CobraWorkerRequestInit = {
      command: 'init',
      accessKey: accessKey,
      start: start,
    };
    cobraWorker.postMessage(cobraInitCmd);

    const workerPromise = new Promise<Worker>((resolve, reject) => {
      cobraWorker.onmessage = (
        event: MessageEvent<CobraWorkerResponse>
      ): void => {
        // @ts-ignore - hold the reference to it, gc doesn't clean worker
        this.cobraWorker = cobraWorker;

        switch (event.data.command) {
          case 'cobra-ready':
            resolve(cobraWorker);
            break;
          case 'cobra-failed':
            reject(event.data.message);
            break;
          case 'cobra-detect':
            callback(event.data.voiceProbability);
            break;
          default:
            // eslint-disable-next-line no-console
            console.warn(`Unhandled message in main.js: ${event.data}`);
            break;
        }
      };
    });

    return workerPromise;
  }
}
